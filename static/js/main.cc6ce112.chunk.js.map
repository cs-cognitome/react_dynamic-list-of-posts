{"version":3,"sources":["api/posts.js","api/users.js","api/comments.js","Comment.js","CommentList.js","User.js","Post.js","PostList.js","App.js","index.js"],"names":["getPosts","fetch","then","response","ok","json","catch","getUsers","getComments","Comment","_ref","comment","react_default","a","createElement","className","name","body","email","CommentList","comments","map","src_Comment","key","id","defaultProps","User","user","address","city","street","suite","zipcode","Post","post","title","src_User","src_CommentList","PostList","posts","src_Post","App","_useState","useState","_useState2","Object","slicedToArray","postsWithUsers","setPostsWithUsers","_useState3","_useState4","isLoading","setLoading","length","src_PostList","type","onClick","_ref2","postsFromServer","usersFromServer","commentsFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","objectSpread2","find","userId","filter","postId","stop","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cc6ce112.chunk.js","sourcesContent":["const postsUrl = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const getPosts = () => fetch(postsUrl)\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => []);\n","const usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getUsers = () => fetch(usersUrl)\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => []);\n","const commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getComments = () => fetch(commentsUrl)\n  .then(response => (response.ok ? response.json() : []))\n  .catch(() => []);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ comment }) => (\n  <div className=\"all\">\n    <ul className=\"comment\">\n      <li className=\"comment__name\">{comment.name}</li>\n      <li className=\"comment__body\">{comment.body}</li>\n      <li className=\"comment__email\">{comment.email}</li>\n    </ul>\n  </div>\n);\n\nComment.propTypes\n  = { comment: PropTypes.objectOf(PropTypes.any).isRequired };\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comments-list\">\n    {comments.map(comment => (\n      <Comment comment={comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nCommentList.propTypes\n  = { comments: PropTypes.arrayOf(PropTypes.object) };\nCommentList.defaultProps = { comments: [{}] };\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <ul className=\"user\">\n    <li className=\"user__name\">\nAuthor:\n      {user.name}\n    </li>\n    <li className=\"user__email\">\nEmail:\n      {user.email}\n    </li>\n    <li className=\"user__address\">\nAddress:\n      {' '}\n      {user.address.city}\n,\n      {' '}\n      {user.address.street}\n,\n      {' '}\n      {user.address.suite}\n,\n      {' '}\n      {user.address.zipcode}\n    </li>\n  </ul>\n);\n\nUser.propTypes = { user: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CommentList from './CommentList';\nimport User from './User';\n\nconst Post = ({ post }) => (\n  <div className=\"all\">\n    <ul className=\"post\">\n      <li className=\"post__title\">\n        {' '}\n        {'ðŸ–‹'}\n        {' '}\n        {' ' }\n        {post.title}\n      </li>\n      <li className=\"post__body\">{post.body}</li>\n      <User user={post.user} />\n      <CommentList comments={post.comments} />\n    </ul>\n  </div>\n);\n\nPost.propTypes\n  = { post: PropTypes.objectOf(PropTypes.any).isRequired };\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <div className=\"post-list\">\n    {posts.map(post => <Post post={post} key={post.id} />)}\n  </div>\n);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { getComments } from './api/comments';\n\nimport PostList from './PostList';\n\nfunction App() {\n  const [postsWithUsers, setPostsWithUsers] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadData = async() => {\n    setLoading(!isLoading);\n\n    const [\n      postsFromServer,\n      usersFromServer,\n      commentsFromServer,\n    ] = await Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments(),\n    ]);\n\n    setPostsWithUsers(postsFromServer.map(\n      post => ({\n        ...post,\n        user: usersFromServer.find(user => user.id === post.userId),\n        comments: commentsFromServer\n          .filter(comment => comment.postId === post.id),\n      })\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Dynamic List of Posts</h1>\n      {postsWithUsers.length > 0 ? (\n        <PostList posts={postsWithUsers} />\n      ) : (\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={loadData}\n        >\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      )}\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}